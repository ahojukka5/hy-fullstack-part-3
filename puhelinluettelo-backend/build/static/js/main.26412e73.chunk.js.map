{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","person","post","delete","id","put","Person","props","onDelete","name","number","onClick","Filter","onChange","value","PersonForm","onSubmit","onNameChange","onNumberChange","type","Persons","persons","setPersons","nameFilter","notify","filteredPersons","filter","toLowerCase","includes","map","key","window","confirm","personService","then","response","p","Notification","message","className","App","useState","newName","setNewName","newNumber","setNewNumber","setNameFilter","notificationMessage","setNotificationMessage","useEffect","data","time","setTimeout","event","preventDefault","newPerson","console","log","maybeExistingPerson","find","existingPerson","newPersons","catch","error","concat","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.26412e73.chunk.js","sourcesContent":["import axios from 'axios';\nconst baseUrl = '/api/persons';\n\nconst getAll = () => {\n  return axios.get(baseUrl);\n};\n\nconst create = person => {\n  return axios.post(baseUrl, person);\n};\n\nconst delete_ = person => {\n  return axios.delete(`${baseUrl}/${person.id}`);\n};\n\nconst update = person => {\n  return axios.put(`${baseUrl}/${person.id}`, person);\n};\n\nexport default {getAll, create, delete_, update};\n","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport personService from './services/persons';\n\nconst Person = props => {\n  const {person, onDelete} = props;\n  return (\n    <li>\n      {person.name} ({person.number}) <button onClick={onDelete}>X</button>\n    </li>\n  );\n};\n\nconst Filter = props => {\n  const {onChange, value} = props;\n  return (\n    <p>\n      Filter by name: <input onChange={onChange} value={value} />\n    </p>\n  );\n};\n\nconst PersonForm = props => {\n  const {onSubmit, onNameChange, name, onNumberChange, number} = props;\n  return (\n    <form onSubmit={onSubmit}>\n      <div>\n        name: <input onChange={onNameChange} value={name} />\n      </div>\n      <div>\n        number: <input onChange={onNumberChange} value={number} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  );\n};\n\nconst Persons = props => {\n  const {persons, setPersons, nameFilter, notify} = props;\n\n  let filteredPersons = persons;\n  if (nameFilter !== '') {\n    filteredPersons = persons.filter(person =>\n      person.name.toLowerCase().includes(nameFilter.toLowerCase()),\n    );\n  }\n\n  const rows = () => {\n    return filteredPersons.map(person => {\n      const onDelete = () => {\n        if (window.confirm(`Delete person ${person.id}: ${person.name}?`)) {\n          personService.delete_(person).then(response => {\n            setPersons(persons.filter(p => p.id !== person.id));\n          });\n          notify(`Person ${person.name} deleted from phonebook!`, 5000);\n        }\n      };\n      return <Person key={person.id} person={person} onDelete={onDelete} />;\n    });\n  };\n\n  return <ul>{rows()}</ul>;\n};\n\nconst Notification = ({message}) => {\n  if (message === null) {\n    return null;\n  }\n  return <div className=\"notification\">{message}</div>;\n};\n\nconst App = props => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [nameFilter, setNameFilter] = useState('');\n  const [notificationMessage, setNotificationMessage] = useState(null);\n\n  useEffect(() => {\n    personService.getAll().then(response => {\n      setPersons(response.data);\n    });\n  }, []);\n\n  const handleNameChange = event => {\n    setNewName(event.target.value);\n  };\n\n  const handleNumberChange = event => {\n    setNewNumber(event.target.value);\n  };\n\n  const handleNameFilterChange = event => {\n    setNameFilter(event.target.value);\n  };\n\n  const notify = (message, time) => {\n    setNotificationMessage(message);\n    setTimeout(() => {\n      setNotificationMessage(null);\n    }, time);\n  };\n\n  const addPerson = event => {\n    event.preventDefault();\n\n    const newPerson = {\n      name: newName,\n      number: newNumber,\n    };\n\n    console.log('Starting adding new person, checking does already exists...');\n\n    const maybeExistingPerson = persons.find(person => person.name === newName);\n    if (maybeExistingPerson) {\n      console.log('Already existing person');\n      const existingPerson = {...maybeExistingPerson, number: newNumber};\n      if (\n        window.confirm(\n          `${existingPerson.name} is already added to phonebook, replace the old number with a new one?`,\n        )\n      ) {\n        console.log('Updating old contact');\n        personService\n          .update(existingPerson)\n          .then(response => {\n            const newPersons = persons.map(person => {\n              return person.id === existingPerson.id ? existingPerson : person;\n            });\n            setPersons(newPersons);\n            setNewNumber('');\n            setNewName('');\n            notify(`Phone number updated for ${existingPerson.name}`, 5000);\n          })\n          .catch(error => {\n            console.log(`Error updating person: ${error}`);\n            notify(\n              `${existingPerson.name} does not exist on phone book (anymore)!`,\n              5000,\n            );\n            setPersons(\n              persons.filter(person => person.id !== existingPerson.id),\n            );\n          });\n      }\n    } else {\n      console.log(\n        `Creating new person ${newPerson.name} with a number ${newPerson.number}`,\n      );\n      personService\n        .create(newPerson)\n        .then(response => {\n          setPersons(persons.concat(response.data));\n          setNewNumber('');\n          setNewName('');\n          notify(\n            `Created new person ${newPerson.name} with number ${newPerson.number}`,\n            5000,\n          );\n        })\n        .catch(error => {\n          console.log(\n            'Unable to create new contact:',\n            error.response.data.error,\n          );\n          notify(error.response.data.error, 5000);\n        });\n    }\n  };\n\n  return (\n    <div>\n      <Notification message={notificationMessage} />\n      <h1>Phonebook</h1>\n      <h2>Add a new contact</h2>\n      <PersonForm\n        onSubmit={addPerson}\n        name={newName}\n        number={newNumber}\n        onNameChange={handleNameChange}\n        onNumberChange={handleNumberChange}\n      />\n      <h2>Numbers</h2>\n      <Filter onChange={handleNameFilterChange} value={nameFilter} />\n      <Persons\n        persons={persons}\n        setPersons={setPersons}\n        nameFilter={nameFilter}\n        notify={notify}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}